//
//  UIToolkitVC.swift
//  ZoomVideoSDKUIToolKit
//
//  Copyright 2023 Zoom Video Communications, Inc. All rights reserved.

import UIKit
import ZoomVideoSDK
import AVFoundation

/// The UI toolkit view controller manages and shows the prebuilt video chat user interface.
public class UIToolkitVC: UIViewController {
    
    // MARK: IBOutlet and variables
    
    @IBOutlet weak var loadingView: UIView!
    @IBOutlet weak var loadingText: UILabel!
    
    @IBOutlet weak var changeCameraBtn: UIButton!
    @IBOutlet weak var sessionTitleLabel: UILabel!
    @IBOutlet weak var endSessionBtn: UIButton!
    
    @IBOutlet weak var activeSpeakerGalleryCollectionView: UICollectionView!
    
    @IBOutlet weak var activeSpeakerGalleryPageControlView: UIView!
    @IBOutlet weak var activeSpeakerGalleryPageControlHolderView: UIView!
    @IBOutlet weak var activeSpeakerGalleryPageControl: UIPageControl!
    
    @IBOutlet weak var localUserView: UIView!
    @IBOutlet weak var localUserLabelHolderView: UIView!
    @IBOutlet weak var localUserLabel: UILabel!
    
    @IBOutlet weak var micBtn: UIButton!
    @IBOutlet weak var videoBtn: UIButton!
    @IBOutlet weak var shareScreenBtn: UIButton!
    @IBOutlet weak var participantBtn: BadgeButton!
    @IBOutlet weak var moreBtn: UIButton!
    
    @IBOutlet weak var chatView: UIView!
    @IBOutlet weak var chatTableView: UITableView!
    @IBOutlet weak var chatDismissBtn: UIButton!
    
    @IBOutlet weak var chatTypingUITextField: UITextField!
    @IBOutlet weak var chatEmojiBtn: UIButton!
    @IBOutlet weak var chatSendBtn: UIButton!
    
    internal var inputSessionContext: SessionContext!
    
    private var domain = "zoom.us"
    
    /// The UIToolkitDelegate sends event notifications.
    public weak var delegate: UIToolkitDelegate?
    
    // Chat related variables
    private var hasNewChat = false
    private let cellReuseIdentifier = "ChatTableViewCell"
    private var chatMessages:[ChatMessage] = []
    
<<<<<<< HEAD
    // New active speaker and gallery view
    private var activeSpeakerGalleryCellReuseIdentifier = "ActiveSpeakerGalleryCollectionViewCell"
    private var activeSpeakerGalleryCellSpacing = 8
    
    // View Model
    var viewModel: UIToolkitViewModel!
=======
    // Active speaker
    private var activeSpeaker: ZoomVideoSDKUser?
    private var remoteActiveSpeakerExist = false
>>>>>>> main
    
    // MARK: Initialization
    
    public init(sessionContext: SessionContext) {
        self.inputSessionContext = sessionContext
        super.init(nibName: "UIToolkitVC", bundle: Bundle(for: UIToolkitVC.self))
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: View Controller Lifecycle
    
    @_documentation(visibility:private)
    public override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        viewModel = UIToolkitViewModel()
        viewModel.delegate = self
    }
    
    @_documentation(visibility:private)
    public override func viewWillAppear(_ animated: Bool) {
        if PermissionManager.shared().checkIfMicAndCameraPermissionsGranted() {
            self.setupConnection()
        }
    }
    
    public override func viewDidLayoutSubviews() {
        micBtn.alignTextBelow()
        videoBtn.alignTextBelow()
        shareScreenBtn.alignTextBelow()
        participantBtn.alignTextBelow()
        moreBtn.alignTextBelow()
    }
    
    @_documentation(visibility:private)
    public override func viewWillDisappear(_ animated: Bool) {
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillHideNotification, object: nil)
        ZoomVideoSDK.shareInstance()?.cleanup()
        super.viewWillDisappear(animated)
    }
    
    @_documentation(visibility:private)
    public override var supportedInterfaceOrientations: UIInterfaceOrientationMask {
        return .portrait
    }
    
    // MARK: Setup
    
    private func setupUI() {
        UIApplication.shared.isIdleTimerDisabled = true
        
        hideKeyboardWhenTappedAround()
        loadingText.text = "Connecting..."
        loadingView.isHidden = false
        
        activeSpeakerGalleryPageControlHolderView.layer.cornerRadius = 10
        activeSpeakerGalleryPageControl.numberOfPages = 1
        activeSpeakerGalleryPageControl.isUserInteractionEnabled = false
        
        if #available(iOS 14.0, *) {
            activeSpeakerGalleryPageControl.backgroundStyle = .minimal
            activeSpeakerGalleryPageControl.allowsContinuousInteraction = false
        }
        
        setupLocalUserView()
        setupActiveSpeakerGalleryView()
        
        chatEmojiBtn.isHidden = true
        
        // Have to manually set title with "" to override the default "button" from appearing even when design is set to nil.
        // For more info: https://stackoverflow.com/questions/73458504/swift-uibutton-empty-in-storyboard-but-has-text-while-running
        changeCameraBtn.setTitle("", for: .normal)
        let changeCameraImage = UIImage(named: "Camera", in: Bundle(for: type(of: self)), compatibleWith: .none)?.withRenderingMode(.alwaysTemplate).resizedImage(Size: CGSize(width: 28, height: 28))
        changeCameraBtn.setImage(changeCameraImage, for: .normal)
        changeCameraBtn.imageView?.contentMode = .scaleAspectFit
        changeCameraBtn.tintColor = .black
        
        endSessionBtn.setTitle("", for: .normal)
        endSessionBtn.layer.cornerRadius = 6
        
        micBtn.titleLabel?.adjustsFontSizeToFitWidth = true
        videoBtn.titleLabel?.adjustsFontSizeToFitWidth = true
        shareScreenBtn.titleLabel?.adjustsFontSizeToFitWidth = true
        participantBtn.setTitle("Participants", for: .normal)
        participantBtn.titleLabel?.adjustsFontSizeToFitWidth = true
        participantBtn.addBadgeToButton(badge: "1")
        chatDismissBtn.setTitle("", for: .normal)
        chatEmojiBtn.setTitle("", for: .normal)
        moreBtn.setTitle("More", for: .normal)
        moreBtn.titleLabel?.adjustsFontSizeToFitWidth = true
        
        chatSendBtn.setTitle("", for: .normal)
        chatSendBtn.layer.cornerRadius = 8
    }
    
    private func setupLocalUserView() {
        localUserView.backgroundColor = .white
        localUserView.clipsToBounds = true
        localUserView.layer.cornerRadius = 8
        localUserLabelHolderView.layer.cornerRadius = localUserLabelHolderView.frame.width / 2
    }
    
    private func setupActiveSpeakerGalleryView() {
        activeSpeakerGalleryCollectionView.dataSource = self
        activeSpeakerGalleryCollectionView.delegate = self
        activeSpeakerGalleryCollectionView.register(UINib(nibName: activeSpeakerGalleryCellReuseIdentifier, bundle: Bundle(for: type(of: self))), forCellWithReuseIdentifier: activeSpeakerGalleryCellReuseIdentifier)
        activeSpeakerGalleryCollectionView.isPagingEnabled = true
        
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        activeSpeakerGalleryCollectionView.collectionViewLayout = layout
        activeSpeakerGalleryCollectionView.showsHorizontalScrollIndicator = false
        activeSpeakerGalleryCollectionView.isScrollEnabled = false
    }
    
    private func setupConnection() {
        if inputSessionContext.jwt.isEmpty {
            delegate?.onError(.EmptySessionToken)
            alertError(with: .EmptySessionToken, dismiss: true)
            return
        }
        if inputSessionContext.sessionName.isEmpty {
            delegate?.onError(.EmptySessionName)
            alertError(with: .EmptySessionName, dismiss: true)
            return
        }
        if inputSessionContext.username.isEmpty {
            delegate?.onError(.EmptyUsername)
            alertError(with: .EmptyUsername, dismiss: true)
            return
        }
        
        let initParams = ZoomVideoSDKInitParams()
        initParams.domain = domain
        initParams.enableLog = true
        
        let sdkInitReturnStatus = ZoomVideoSDK.shareInstance()?.initialize(initParams)
        
        ZoomVideoSDK.shareInstance()?.delegate = self
        
        switch sdkInitReturnStatus {
        case .Errors_Success:
            print("Zoom UI Kit initialized successfully")
            
            let sessionContext = ZoomVideoSDKSessionContext()
            
            sessionContext.token = inputSessionContext.jwt
            sessionContext.sessionName = inputSessionContext.sessionName
            sessionContext.userName = inputSessionContext.username
            let videoOption = ZoomVideoSDKVideoOptions()
            videoOption.localVideoOn = false
            sessionContext.videoOption = videoOption
            sessionContext.audioOption?.connect = false
            
            if let password = inputSessionContext.sessionPassword {
                sessionContext.sessionPassword = password
            }
            
            ZoomVideoSDK.shareInstance()?.joinSession(sessionContext)
            print("Connecting user \(inputSessionContext.username) to session \(inputSessionContext.sessionName)...")
        default:
            if let error = sdkInitReturnStatus {
                print("Zoom UI Kit failed to initialize with error: \(error)")
            }
        }
    }
    
    // MARK: IBAction
    
    @IBAction func tapChangeCameraBtn(_ sender: Any) {
        print("Local user tapped on change camera button")
        if let videoHelper = ZoomVideoSDK.shareInstance()?.getVideoHelper() {
            videoHelper.switchCamera()
        }
    }
    
    @IBAction func tapEndSessionBtn(_ sender: Any) {
        print("Local user tapped on end session button")
        
        let alert = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)
        let leaveAction = UIAlertAction(title: "Leave Session", style: .default, handler: {_ in
            print("Local user tapped on leave button")
            
            if let userIsHost = ZoomVideoSDK.shareInstance()?.getSession()?.getMySelf()?.isHost(), userIsHost, ZoomVideoSDK.shareInstance()?.getSession()?.getRemoteUsers()?.count ?? 0 > 0 {
                let bottomSheetVC = CustomBottomSheetVC(parentVC: self, entryPoint: .LeaveAndReassignHost, delegate: self.delegate, isSelectable: true, addOnFunction: self.leaveSession)
                self.view.addSubview(bottomSheetVC.view)
                self.didMove(toParent: bottomSheetVC)
            } else {
                self.leaveSession()
            }
        })
        alert.addAction(leaveAction)
        
        if let userIsHost = ZoomVideoSDK.shareInstance()?.getSession()?.getMySelf()?.isHost(), userIsHost {
            let endAction = UIAlertAction(title: "End Session for All", style: .destructive, handler: {_ in
                print("Local user tapped on end button")
                self.loadingText.text = "Ending session..."
                self.loadingView.isHidden = false
                if let error = ZoomVideoSDK.shareInstance()?.leaveSession(true) {
                    if error == .Errors_Success {
                        self.dismiss(animated: true)
                    } else {
                        self.loadingView.isHidden = false
                        self.delegate?.onError(.LeaveSessionFailed)
                        self.alertError(with: .LeaveSessionFailed, dismiss: false)
                    }
                }
            })
            alert.addAction(endAction)
        }
        
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel, handler: {_ in
            print("Local user tapped on cancel button")
        })
        alert.addAction(cancelAction)
        
        self.present(alert, animated: true, completion: nil)
    }
    
    @IBAction func tapMicBtn(_ sender: Any) {
        print("Local user tapped on toggle mic button")
        micBtn.isUserInteractionEnabled = false
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            self.micBtn.isUserInteractionEnabled = true
        }
        if let audioHelper = ZoomVideoSDK.shareInstance()?.getAudioHelper() {
            if (ZoomVideoSDK.shareInstance()?.getSession()?.getMySelf()?.audioStatus()?.audioType == ZoomVideoSDKAudioType.none) {
                let error = audioHelper.startAudio()
                if error != .Errors_Success {
                    
                }
            } else {
                if let isMuted = ZoomVideoSDK.shareInstance()?.getSession()?.getMySelf()?.audioStatus()?.isMuted, let myself = ZoomVideoSDK.shareInstance()?.getSession()?.getMySelf() {
                    
                    var error: ZoomVideoSDKError
                    
                    if isMuted {
                        error = audioHelper.unmuteAudio(myself)
                    } else {
                        error = audioHelper.muteAudio(myself)
                    }
                    
                    if error != .Errors_Success {
                        if !isMuted {
                            delegate?.onError(.MuteMicFailed)
                            alertError(with: .MuteMicFailed, dismiss: false)
                        } else {
                            delegate?.onError(.UnmuteMicFailed)
                        }
                    }
                }
            }
        }
    }
    
    @IBAction func tapVideoBtn(_ sender: Any) {
        print("Local user tapped on toggle video button")
        videoBtn.isUserInteractionEnabled = false
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            self.videoBtn.isUserInteractionEnabled = true
        }
        if let videoHelper = ZoomVideoSDK.shareInstance()?.getVideoHelper(), let videoIsOn = ZoomVideoSDK.shareInstance()?.getSession()?.getMySelf()?.getVideoCanvas()?.videoStatus()?.on {
            
            if videoIsOn {
                let error = videoHelper.stopVideo()
                if error != .Errors_Success {
                    delegate?.onError(.StopCameraFailed)
                    alertError(with: .StopCameraFailed, dismiss: false)
                }
            } else {
                DispatchQueue.global(qos: .background).async {
                    let error = videoHelper.startVideo()
                    if error != .Errors_Success {
                        self.delegate?.onError(.StartCameraFailed)
                    }
                }
            }
        }
    }
    
    @IBAction func tapShareScreenBtn(_ sender: Any) {
        print("Local user tapped on toggle share screen button")
    }
    
    @IBAction func tapParticipantBtn(_ sender: Any) {
        print("Local user tapped on toggle chat view button")
        if let isChatDisabled = ZoomVideoSDK.shareInstance()?.getChatHelper().isChatDisabled() {
            if !isChatDisabled {
                if let chatImageUIName = UIImage(named: "Chat", in: Bundle(for: type(of: self)), compatibleWith: .none), hasNewChat {
                    participantBtn.setImage(chatImageUIName, for: .normal)
                }
                chatView.isHidden = !chatView.isHidden
            }
        }
    }
    
    @IBAction func tapDismissChatBtn(_ sender: Any) {
        print("Local user tapped on close X chat button")
        chatView.isHidden = true
    }
    
    @IBAction func tapEmojiBtn(_ sender: Any) {
        // TODO: Remove or add this based on its IBOutlet above
    }
    
    @IBAction func tapChatSendBtn(_ sender: Any) {
        if let textField = chatTypingUITextField, let textFieldDelegate = textField.delegate {
            let result = textFieldDelegate.textFieldShouldReturn?(textField)
            print("Local user tapped on send chat button: \(result ?? false)")
        }
    }
    
    @IBAction func tapMoreBtn(_ sender: Any) {
        MoreOptionManager.shared().showAvailableOptionUI()
    }
    
    // MARK: Private Method
    
<<<<<<< HEAD
    private func updateLocalUserVideoView() {
        viewModel.updateLocalUserCameraView(with: localUserView)
        localUserLabel.text = viewModel.getLocalUser().getName()?.getDefaultName
=======
    private func setupOwnVideoView() {
        setOwnVideoView(to: ownView, defaultBackgroundColor: UIColor(red: 0.278, green: 0.576, blue: 0.945, alpha: 1))
        ownView.clipsToBounds = true
        ownView.layer.cornerRadius = 8
    }
    
    private func setupActiveSpeakerVideoView(withRemoteUser user: ZoomVideoSDKUser?) {
        if let user = user {
            if let userVideoCanvas = user.getVideoCanvas(), let userVideoIsOn = userVideoCanvas.videoStatus()?.on {
                if let activeSpeaker = activeSpeaker, activeSpeaker != user, let currentActiveSpeakerVideoCanvas = activeSpeaker.getVideoCanvas(), let videoStatus = currentActiveSpeakerVideoCanvas.videoStatus(), videoStatus.on {
                    currentActiveSpeakerVideoCanvas.unSubscribe(with: activeSpeakerView)
                }
                
                if userVideoIsOn {
                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                        userVideoCanvas.subscribe(with: self.activeSpeakerView, aspectMode: .panAndScan, andResolution: ._Auto)
                    }
                } else {
                    userVideoCanvas.unSubscribe(with: activeSpeakerView)
                    activeSpeakerView.subviews.forEach({ $0.removeFromSuperview() })
                    
                    let defaultLabel = UILabel(frame: .infinite)
                    defaultLabel.text = getDefaultName(with: user.getName() ?? "")
                    defaultLabel.textAlignment = .center
                    defaultLabel.font = .boldSystemFont(ofSize: 196)
                    defaultLabel.textColor = .white
                    activeSpeakerView.addSubview(defaultLabel)
                    activeSpeakerView.backgroundColor = .black
                    
                    defaultLabel.translatesAutoresizingMaskIntoConstraints = false
                    
                    NSLayoutConstraint.activate([
                        defaultLabel.widthAnchor.constraint(equalTo: activeSpeakerView.widthAnchor),
                        defaultLabel.heightAnchor.constraint(equalTo: activeSpeakerView.heightAnchor),
                        defaultLabel.centerXAnchor.constraint(equalTo: activeSpeakerView.centerXAnchor),
                        defaultLabel.centerYAnchor.constraint(equalTo: activeSpeakerView.centerYAnchor)
                    ])
                }
                
                activeSpeaker = user
            }
        } else {
            setOwnVideoView(to: activeSpeakerView, defaultBackgroundColor: UIColor(red: 0.075, green: 0.086, blue: 0.098, alpha: 1), defaultFontSize: 196, defaultFontColor: UIColor(red: 0.969, green: 0.976, blue: 0.98, alpha: 1))
            activeSpeaker = ZoomVideoSDK.shareInstance()?.getSession()?.getMySelf()
        }
        
        activeSpeakerView.clipsToBounds = true
    }
    
    private func setOwnVideoView(to targetView: UIView, defaultBackgroundColor color: UIColor, defaultFontSize: CGFloat = 52, defaultFontColor: UIColor = UIColor(red: 0.969, green: 0.976, blue: 0.98, alpha: 1)) {
        if let myself = ZoomVideoSDK.shareInstance()?.getSession()?.getMySelf(), let myVideoCanvas = myself.getVideoCanvas(), let myVideoIsOn = myVideoCanvas.videoStatus()?.on {
            if myVideoIsOn {
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                    myVideoCanvas.subscribe(with: targetView, aspectMode: .panAndScan, andResolution: ._Auto)
                }
            } else {
                myVideoCanvas.unSubscribe(with: targetView)
                targetView.subviews.forEach({ $0.removeFromSuperview() })
                
                let defaultLabel = UILabel(frame: .infinite)
                defaultLabel.text = getDefaultName(with: myself.getName() ?? "")
                defaultLabel.textAlignment = .center
                defaultLabel.font = .boldSystemFont(ofSize: defaultFontSize)
                defaultLabel.textColor = defaultFontColor
                targetView.addSubview(defaultLabel)
                targetView.backgroundColor = color
                
                defaultLabel.translatesAutoresizingMaskIntoConstraints = false
                
                NSLayoutConstraint.activate([
                    defaultLabel.widthAnchor.constraint(equalTo: targetView.widthAnchor),
                    defaultLabel.heightAnchor.constraint(equalTo: targetView.heightAnchor),
                    defaultLabel.centerXAnchor.constraint(equalTo: targetView.centerXAnchor),
                    defaultLabel.centerYAnchor.constraint(equalTo: targetView.centerYAnchor)
                ])
                
                defaultLabel.layer.cornerRadius = 8
            }
        }
    }
    
    private func getDefaultName(with name: String) -> String {
        let nameArray: [String] = name.components(separatedBy: " ")
        guard nameArray.count > 0, let firstInitial = nameArray[0].uppercased().first else { return "" }
        if nameArray.count > 1, let secondInitial = nameArray[1].uppercased().first {
            return "\(firstInitial)\(secondInitial)"
        }
        return "\(firstInitial)"
>>>>>>> main
    }
    
    private func setupBottomButtonBar() {
        setupMicBtnUI()
        setupVideoBtnUI()
        setupShareScreenBtnUI()
        setupParticipantsBtnUI()
    }
    
    private func setupMicBtnUI() {
        var audioImageName = "Mic"
        
        if let isMuted = ZoomVideoSDK.shareInstance()?.getSession()?.getMySelf()?.audioStatus()?.isMuted {
            audioImageName = isMuted ? "Mic-Disabled" : "Mic"
            micBtn.setTitle(isMuted ? "Unmute" : "Mute", for: .normal)
        }
        
        let audioUIImage = UIImage(named: audioImageName, in: Bundle(for: type(of: self)), compatibleWith: .none)?.withRenderingMode(.alwaysTemplate)
        
        micBtn.frame.size = CGSize(width: 56, height: 56)
        micBtn.setImage(audioUIImage, for: .normal)
    }
    
    private func setupVideoBtnUI() {
        var videoImageName = "Video"
        
        if let videoIsOn = ZoomVideoSDK.shareInstance()?.getSession()?.getMySelf()?.getVideoCanvas()?.videoStatus()?.on {
            videoImageName = videoIsOn ?  "Video" : "Video-Disabled"
            videoBtn.setTitle(videoIsOn ? "Stop Video" : "Start Video", for: .normal)
        }
        
        let videoImageUIName = UIImage(named: videoImageName, in: Bundle(for: type(of: self)), compatibleWith: .none)?.withRenderingMode(.alwaysTemplate)
        
        videoBtn.frame.size = CGSize(width: 56, height: 56)
        videoBtn.setImage(videoImageUIName, for: .normal)
    }
    
    private func setupShareScreenBtnUI() {
        if FeatureManager.shared().checkIfFeatureIsAvailable(with: .ShareScreen) {
            shareScreenBtn.isHidden = false
            
            var screenShareImageName = "ShareScreen"
            
            let isSharing = (ZoomVideoSDK.shareInstance()?.getShareHelper().isSharingOut() ?? false || ZoomVideoSDK.shareInstance()?.getShareHelper().isScreenSharingOut() ?? false)
            
            screenShareImageName = isSharing ?  "ShareStop" : "ShareScreen"
            shareScreenBtn.setTitle(isSharing ? "Stop Share" : "Share", for: .normal)
            
            let shareScreenImageUIName = UIImage(named: screenShareImageName, in: Bundle(for: type(of: self)), compatibleWith: .none)?.withRenderingMode(.alwaysTemplate)
                .resizedImage(Size: CGSize(width: 28, height: 28))
            
            shareScreenBtn.imageView?.contentMode = .scaleAspectFit
            shareScreenBtn.frame.size = CGSize(width: 56, height: 56)
            shareScreenBtn.setImage(shareScreenImageUIName, for: .normal)
        } else {
            shareScreenBtn.isHidden = true
        }
    }
    
    private func setupParticipantsBtnUI() {
        participantBtn.addBadgeToButton(badge: viewModel.getTotalParticipants())
    }
    
    private func setupChatBtnUI() {
        var chatImageName = "ChatDisabled"
        
        guard let chatHelper = ZoomVideoSDK.shareInstance()?.getChatHelper() else { return }
        
        let isChatEnabled = chatHelper.getChatPrivilege() == .everyone_Publicly_And_Privately
        
        chatImageName = isChatEnabled ? "Chat" : "ChatDisabled"
        
        let chatImageUIName = UIImage(named: chatImageName, in: Bundle(for: type(of: self)), compatibleWith: .none)?.withRenderingMode(.alwaysTemplate)
        
        participantBtn.frame.size = CGSize(width: 56, height: 56)
        participantBtn.setImage(chatImageUIName, for: .normal)
        participantBtn.tintColor = .white
        
        participantBtn.isEnabled = isChatEnabled
        
        if isChatEnabled {
            setupChat()
        }
    }
    
    private func setupChat() {
        chatView.isHidden = true
        
        chatDismissBtn.imageView?.contentMode = .scaleAspectFit
        
        chatView.clipsToBounds = true
        chatView.layer.cornerRadius = 12
        chatTableView.register(UINib(nibName: cellReuseIdentifier, bundle: Bundle(for: type(of: self))), forCellReuseIdentifier: cellReuseIdentifier)
        chatTableView.rowHeight = UITableView.automaticDimension
        chatTableView.estimatedRowHeight = 80
        chatTableView.backgroundColor = .white
        
        chatTypingUITextField.delegate = self
        chatTypingUITextField.layer.borderColor = UIColor(red: 0.267, green: 0.294, blue: 0.325, alpha: 1).cgColor
        chatTypingUITextField.layer.borderWidth = 1
        chatTypingUITextField.layer.cornerRadius = 8
        chatTypingUITextField.returnKeyType = .send
        chatTypingUITextField.attributedPlaceholder = NSAttributedString(
            string: "Type message here...",
            attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.596, green: 0.627, blue: 0.663, alpha: 1)]
        )
        chatTypingUITextField.textColor = .black
        
        let emojiImageName = "Emoji"
        let emojiImageUIName = UIImage(named: emojiImageName, in: Bundle(for: type(of: self)), compatibleWith: .none)?.withRenderingMode(.alwaysTemplate)
        chatEmojiBtn.frame.size = CGSize(width: 20, height: 20)
        chatEmojiBtn.setImage(emojiImageUIName, for: .normal)
        chatEmojiBtn.tintColor = .gray
        
        let sendImageName = "Send"
        let chatImageUIName = UIImage(named: sendImageName, in: Bundle(for: type(of: self)), compatibleWith: .none)?.withRenderingMode(.alwaysTemplate)
        chatSendBtn.frame.size = CGSize(width: 36, height: 36)
        chatSendBtn.setImage(chatImageUIName, for: .normal)
        chatSendBtn.tintColor = .white
        
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name: UIResponder.keyboardWillHideNotification, object: nil)
    }
    
    private func leaveSession() {
        self.loadingText.text = "Leaving session..."
        self.loadingView.isHidden = false
        if let error = ZoomVideoSDK.shareInstance()?.leaveSession(false) {
            if error == .Errors_Success {
                self.dismiss(animated: true)
            } else {
                self.loadingView.isHidden = false
                self.delegate?.onError(.LeaveSessionFailed)
                self.alertError(with: .LeaveSessionFailed, dismiss: false)
            }
        }
    }
    
    @objc func keyboardWillShow(notification: NSNotification) {
        if let keyboardSize = (notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue {
            if self.view.frame.origin.y == 0 {
                self.view.frame.origin.y -= keyboardSize.height
            }
        }
    }
    
    @objc func keyboardWillHide(notification: NSNotification) {
        if self.view.frame.origin.y != 0 {
            self.view.frame.origin.y = 0
        }
    }
}

// MARK: ZoomVideoSDKDelegate

@_documentation(visibility:private)
extension UIToolkitVC: ZoomVideoSDKDelegate {
    public func onError(_ ErrorType: ZoomVideoSDKError, detail details: Int) {
        switch ErrorType {
        case .Errors_Auth_Empty_Key_or_Secret:
            alertError(with: .EmptyKeyOrSecret, dismiss: true)
            delegate?.onError(.EmptyKeyOrSecret)
        case .Errors_Auth_Wrong_Key_or_Secret:
            alertError(with: .InvalidKeyOrSecret, dismiss: true)
            delegate?.onError(.InvalidKeyOrSecret)
        case .Errors_JoinSession_Token_NoSessionName:
            alertError(with: .TokenEmptySessionName, dismiss: true)
            delegate?.onError(.TokenEmptySessionName)
        case .Errors_JoinSession_Invalid_SessionName:
            alertError(with: .InvalidSessionName, dismiss: true)
            delegate?.onError(.InvalidSessionName)
        case .Errors_JoinSession_Invalid_Password:
            alertError(with: .WrongPassword, dismiss: true)
            delegate?.onError(.WrongPassword)
        case .Errors_JoinSession_Invalid_SessionToken:
            alertError(with: .InvalidSessionToken, dismiss: true)
            delegate?.onError(.InvalidSessionToken)
        case .Errors_Session_Need_Password:
            alertError(with: .MissingPassword, dismiss: true)
            delegate?.onError(.MissingPassword)
        case .Errors_JoinSession_SessionName_TooLong:
            alertError(with: .SessionNameTooLong, dismiss: true)
            delegate?.onError(.SessionNameTooLong)
        case .Errors_JoinSession_Token_MismatchedSessionName:
            alertError(with: .TokenMismatchedSessionName, dismiss: true)
            delegate?.onError(.TokenMismatchedSessionName)
        case .Errors_JoinSession_Token_UserIdentity_TooLong:
            alertError(with: .TokenUserIdentityTooLong, dismiss: true)
            delegate?.onError(.TokenUserIdentityTooLong)
        case .Errors_Session_Invalid_Param:
            alertError(with: .InvalidParam, dismiss: true)
            delegate?.onError(.InvalidParam)
        case .Errors_Session_Join_Failed:
            alertError(with: .JoinFailed, dismiss: true)
            delegate?.onError(.JoinFailed)
        default:
            break
        }
    }
    
    public func onSessionNeedPassword(_ completion: ((String?, Bool) -> ZoomVideoSDKError)? = nil) {
        let alert = UIAlertController(title: "Required password", message: "Enter session password", preferredStyle: .alert)
        alert.addTextField { (textField) in
            textField.text = ""
        }
        alert.addAction(UIAlertAction(title: "Leave", style: .destructive, handler: { [] (_) in
            _ = completion!(nil, true)
        }))
        alert.addAction(UIAlertAction(title: "Enter", style: .default, handler: { [weak alert] (_) in
            let textField = alert?.textFields![0]
            _ = completion!(textField?.text, false)
        }))
        self.present(alert, animated: true, completion: nil)
    }
    
    public func onSessionPasswordWrong(_ completion: ((String?, Bool) -> ZoomVideoSDKError)? = nil) {
        let alert = UIAlertController(title: "Wrong password", message: "Enter session password", preferredStyle: .alert)
        alert.addTextField { (textField) in
            textField.text = ""
        }
        alert.addAction(UIAlertAction(title: "Leave", style: .destructive, handler: { [] (_) in
            _ = completion!(nil, true)
        }))
        alert.addAction(UIAlertAction(title: "Enter", style: .default, handler: { [weak alert] (_) in
            let textField = alert?.textFields![0]
            _ = completion!(textField?.text, false)
        }))
        self.present(alert, animated: true, completion: nil)
    }
    
    public func onSessionJoin() {
        print("Successfully joined session: \(ZoomVideoSDK.shareInstance()?.getSession()?.getName() ?? "No Session Name")")
        
        /* Note!!
          The onJoinSession callback always return empty result for the getRemoteUsers method. Thus, we cannot get remote users here despite having remote user(s) and will have to rely on onUserJoin instead.
         */
        
        viewModel.getInitialData()
        activeSpeakerGalleryCollectionView.reloadData()
        
        loadingView.isHidden = true
        
        sessionTitleLabel.text = viewModel.getSessionTitle()
        
        updateLocalUserVideoView()
        setupBottomButtonBar()
        
        delegate?.onViewLoaded()
    }
    
    public func onSessionLeave() {
        if ZoomVideoSDK.shareInstance()?.getSession()?.getHostName() == nil {
            if let settingsVC = UIApplication.topViewController() as? SettingsVC {
                settingsVC.dismissDetail()
            }
            
            let alert = UIAlertController(title: "Host ended session.", message: nil, preferredStyle: .alert)
            let dismissAction = UIAlertAction(title: "Leave", style: .default, handler: {_ in
                ZoomVideoSDK.shareInstance()?.cleanup()
                print("Successfully leave session")
                self.delegate?.onViewDismissed()
                self.dismiss(animated: true)
            })
            alert.addAction(dismissAction)
            self.present(alert, animated: true, completion: nil)
        } else {
            print("Successfully leave session")
            delegate?.onViewDismissed()
        }
    }
    
    public func onUserAudioStatusChanged(_ helper: ZoomVideoSDKAudioHelper?, user userArray: [ZoomVideoSDKUser]?) {
        if let userArray = userArray {
            for user in userArray {
                if user == ZoomVideoSDK.shareInstance()?.getSession()?.getMySelf() {
                    setupMicBtnUI()
                }
                
                if let userIndexPathList = viewModel.getUserIndex(with: user), let userIsMuted = user.audioStatus()?.isMuted {
                    for currentIndex in userIndexPathList {
                        guard let cell = activeSpeakerGalleryCollectionView.cellForItem(at: currentIndex) as? ActiveSpeakerGalleryCollectionViewCell else { return }
                        viewModel.updateUser(with: user)
                        cell.micImageView.isHidden = !userIsMuted
                    }
                }
            }
        }
    }
    
    public func onUserVideoStatusChanged(_ helper: ZoomVideoSDKVideoHelper?, user userArray: [ZoomVideoSDKUser]?) {
        if let userArray = userArray {
            for user in userArray {
                if let userIndexPathList = viewModel.getUserIndex(with: user) {
                    for currentIndex in userIndexPathList {
                        if let cell = activeSpeakerGalleryCollectionView.cellForItem(at: currentIndex) as? ActiveSpeakerGalleryCollectionViewCell {
                            viewModel.updateUser(with: user)
                            viewModel.updateActiveSpeakerGalleryCameraView(with: cell, at: currentIndex.row)
                        }
                    }
                }
                
                if user == ZoomVideoSDK.shareInstance()?.getSession()?.getMySelf() {
                    setupVideoBtnUI()
<<<<<<< HEAD
                    updateLocalUserVideoView()
=======
                    setupOwnVideoView()
                    if !remoteActiveSpeakerExist {
                        setupActiveSpeakerVideoView(withRemoteUser: nil)
                    }
                } else {
                    if activeSpeaker == user {
                        setupActiveSpeakerVideoView(withRemoteUser: user)
                    }
>>>>>>> main
                }
            }
        }
    }
    
    public func onUserActiveAudioChanged(_ helper: ZoomVideoSDKUserHelper?, users userArray: [ZoomVideoSDKUser]?) {
        if let userArray = userArray, let myself = ZoomVideoSDK.shareInstance()?.getSession()?.getMySelf() {
            for user in userArray {
                print("User \(user.getName() ?? "") is speaking.")
                if (user.getID() != myself.getID()) {
                    viewModel.setActiveSpeaker(with: user)
                }
            }
        }
    }
    
    public func onUserJoin(_ helper: ZoomVideoSDKUserHelper?, users userArray: [ZoomVideoSDKUser]?) {
        if let userArray = userArray, let myself = ZoomVideoSDK.shareInstance()?.getSession()?.getMySelf() {
            for user in userArray {
                if (user.getID() != myself.getID()) {
<<<<<<< HEAD
                    activeSpeakerGalleryCollectionView.performBatchUpdates({
                        let userIndex = viewModel.addRemoteUserList(with: user)
                        setupParticipantsBtnUI()
                        activeSpeakerGalleryPageControl.numberOfPages = viewModel.getUpdatedPageControlPage()
                        activeSpeakerGalleryCollectionView.isScrollEnabled = viewModel.shouldShowPageControl()
                        activeSpeakerGalleryCollectionView.insertItems(at: [IndexPath(item: userIndex, section: 0)])
                    })
=======
                    if let remoteUsers = ZoomVideoSDK.shareInstance()?.getSession()?.getRemoteUsers(), remoteUsers.count > 0 {
                        setupActiveSpeakerVideoView(withRemoteUser: user)
                    }
                    remoteActiveSpeakerExist = true
>>>>>>> main
                }
            }
        }
    }
    
    public func onUserLeave(_ helper: ZoomVideoSDKUserHelper?, users userArray: [ZoomVideoSDKUser]?) {
        if let userArray = userArray, let myself = ZoomVideoSDK.shareInstance()?.getSession()?.getMySelf() {
            for user in userArray {
                if (user.getID() != myself.getID()) {
                    activeSpeakerGalleryCollectionView.performBatchUpdates({
                        if let index = viewModel.removeRemoteUserList(with: user) {
                            setupParticipantsBtnUI()
                            activeSpeakerGalleryPageControl.numberOfPages = viewModel.getUpdatedPageControlPage()
                            activeSpeakerGalleryCollectionView.isScrollEnabled = viewModel.shouldShowPageControl()
                            activeSpeakerGalleryCollectionView.deleteItems(at: [IndexPath(item: index, section: 0)])
                        }
                    }) { [weak self] (result) in
                        // Reload Data is necessary or we will need to manually update each affected item and will need to find out what is the best way to do this.
                        guard let self = self else { return }
                        self.activeSpeakerGalleryCollectionView.reloadData()
                        if self.viewModel.isOnlyLocalUserLeft() {
                            self.activeSpeakerGalleryCollectionView.scrollToItem(at: IndexPath(row: 0, section: 0), at: .top, animated: false)
                        }
                    }
                }
            }
        }
    }
    
    public func onChatPrivilegeChanged(_ helper: ZoomVideoSDKChatHelper?, privilege currentPrivilege: ZoomVideoSDKChatPrivilegeType) {
        setupChatBtnUI()
    }
    
    public func onChatNewMessageNotify(_ helper: ZoomVideoSDKChatHelper?, message chatMessage: ZoomVideoSDKChatMessage?) {
        if let content = chatMessage?.content, let senderName = chatMessage?.senderUser?.getName(), let isSelfSend = chatMessage?.isSelfSend {
            hasNewChat = true
            
            chatMessages.append(ChatMessage(sender: senderName, content: content, isSelfSend: isSelfSend))
            
            let indexSet = IndexSet(integer: chatMessages.count - 1)
            
            chatTableView.performBatchUpdates({ [weak self] in
                self?.chatTableView.insertSections(indexSet, with: .automatic)
            }) { (_) in
                let indexPath = IndexPath(row: 0, section: self.chatMessages.count - 1)
                self.chatTableView.scrollToRow(at: indexPath, at: .bottom, animated: true)
            }
            
            if chatView.isHidden {
                let chatImageUIName = UIImage(named: "ChatNew", in: Bundle(for: type(of: self)), compatibleWith: .none)?.withRenderingMode(.alwaysTemplate)
                
                participantBtn.frame.size = CGSize(width: 56, height: 56)
                participantBtn.setImage(chatImageUIName, for: .normal)
                participantBtn.tintColor = .white
            }
        }
    }
    
    public func onUserNameChanged(_ user: ZoomVideoSDKUser?) {
        guard let settingsVC = UIApplication.topViewController() as? SettingsVC else { return }
        settingsVC.setupNavBar()
        settingsVC.tableView.reloadData()
    }
    
    public func onUserManagerChanged(_ user: ZoomVideoSDKUser?) {
        guard let settingsVC = UIApplication.topViewController() as? SettingsVC else { return }
        settingsVC.setupNavBar()
        settingsVC.tableView.reloadData()
    }
    
    private func getFirstRemoteUserWithCameraOrWithout() -> ZoomVideoSDKUser? {
        if let remoteUsers = ZoomVideoSDK.shareInstance()?.getSession()?.getRemoteUsers(), remoteUsers.count > 0 {
            for user in remoteUsers {
                if let cameraIsOn = user.getVideoCanvas()?.videoStatus()?.on, cameraIsOn {
                    return user
                }
            }
            // If none of the remote user has camera on, we will return the first remote user.
            return remoteUsers.first
        }
        return nil
    }
}

// MARK: UITableViewDelegate & UITableViewDataSource
// Used for Chat Table View

@_documentation(visibility:private)
extension UIToolkitVC: UITableViewDelegate, UITableViewDataSource {
    public func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 1
    }
    
    public func numberOfSections(in tableView: UITableView) -> Int {
        return chatMessages.count
    }
    
    public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = chatTableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier) as? ChatTableViewCell else { return UITableViewCell() }
        
        cell.usernameLabel.text = (chatMessages[indexPath.section].isSelfSend ? "Me" : chatMessages[indexPath.section].sender) + " to Everyone"
        cell.profileInitialLabel.text = chatMessages[indexPath.section].sender.getDefaultName
        cell.profileInitialLabel.textColor = .white
        cell.profileInitialLabel.textAlignment = .center
        cell.profileInitialLabel.backgroundColor = chatMessages[indexPath.section].isSelfSend ? .lightGray : .darkGray
        cell.backgroundColor = .clear
        
        cell.messageByMe = chatMessages[indexPath.section].isSelfSend
        cell.messageLabel.text = chatMessages[indexPath.section].content
        
        return cell
    }
    
    public func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        if section == 0 {
            return 0
        } else {
            return 1
        }
    }
    
    public func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
}

// MARK: UICollectionViewDelegate, UICollectionViewDataSource & UICollectionViewDelegateFlowLayout
// Used for active speaker and gallery view.

@_documentation(visibility:private)
extension UIToolkitVC: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    public func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let offSet = scrollView.contentOffset.x
        let width = scrollView.frame.width
        let horizontalCenter = width / 2
        
        activeSpeakerGalleryPageControl.currentPage = Int(offSet + horizontalCenter) / Int(width)
    }
    
    public func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return viewModel.getActiveSpeakerGalleryCount()
    }
    
    public func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: activeSpeakerGalleryCellReuseIdentifier, for: indexPath) as? ActiveSpeakerGalleryCollectionViewCell else { return UICollectionViewCell() }
        cell.contentView.backgroundColor = UIColor(red: 243/255, green: 243/255, blue: 243/255, alpha: 1)
        let username = viewModel.getActiveSpeakerGalleryName(index: indexPath.row)
        cell.nameLabel.text = username
        cell.showDefaultAvatar(bool: true)
        cell.speakerView.clipsToBounds = true
        
        if indexPath.row != 0 {
            cell.addCustomConstraintToCellView(paddingSize: 6)
            cell.addCornerRadius(size: 8)
        } else {
            cell.addCustomConstraintToCellView(paddingSize: 0)
            cell.addCornerRadius(size: 0)
        }
        
        viewModel.updateActiveSpeakerGalleryCameraView(with: cell, at: indexPath.row)
        
        cell.layoutIfNeeded()
        cell.defaultAvatarView.layer.cornerRadius = cell.defaultAvatarView.frame.width / 2
        cell.setDefaultAvatarTitle(text: username.getDefaultName, fontSize: indexPath.row == 0 ? 64 : 48)
        
        return cell
    }
    
    public func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        if indexPath.row == 0 {
            return CGSize(width: activeSpeakerGalleryCollectionView.frame.width, height: activeSpeakerGalleryCollectionView.frame.height)
        } else {
            return CGSize(width: activeSpeakerGalleryCollectionView.frame.width / 2, height: activeSpeakerGalleryCollectionView.frame.height / 2)
        }
    }
    
    public func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        if indexPath.row == 0 {
            UIView.animate(withDuration: 0.5) {
                self.localUserView.alpha = 1
            }
        } else {
            UIView.animate(withDuration: 0.5) {
                self.localUserView.alpha = 0
            }
        }
    }
    
    public func collectionView(_ collectionView: UICollectionView, didEndDisplaying cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        if indexPath.row == 0 {
            UIView.animate(withDuration: 0.5) {
                self.localUserView.alpha = 0
            }
        } else {
            UIView.animate(withDuration: 0.5) {
                self.localUserView.alpha = 1
            }
        }
    }
    
    public func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 0
    }
    
    public func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 0
    }
}

// MARK: UIToolkitViewModelDelegate

@_documentation(visibility:private)
extension UIToolkitVC: UIToolkitViewModelDelegate {
    func updatedActiveSpeaker(isMyself: Bool) {
        localUserView.isHidden = isMyself
        
        let activeSpeakerIndexPath = IndexPath(row: 0, section: 0)
        guard let cell = activeSpeakerGalleryCollectionView.cellForItem(at: activeSpeakerIndexPath) as? ActiveSpeakerGalleryCollectionViewCell else { return }
        
        let username = viewModel.getActiveSpeakerGalleryName(index: 0)
        cell.nameLabel.text = username
        viewModel.updateActiveSpeakerGalleryCameraView(with: cell, at: 0)
        cell.setDefaultAvatarTitle(text: username.getDefaultName, fontSize: 64)
    }
}

// MARK: UITextFieldDelegate

@_documentation(visibility:private)
extension UIToolkitVC: UITextFieldDelegate {
    func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
        if (text == "\n") {
            textView.resignFirstResponder()
        }
        return true
    }
    
    public func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if let text = textField.text, text.count > 0, let chatHelper = ZoomVideoSDK.shareInstance()?.getChatHelper()  {
            if !chatHelper.isChatDisabled() {
                let error = chatHelper.sendChat(toAll: text)
                if error == .Errors_Success {
                    textField.text?.removeAll()
                    textField.resignFirstResponder()
                } else {
                    alertError(with: .SendMessageFailed, dismiss: false)
                }
            }
        }
        return true
    }
}

// MARK: Keyboard Related

extension UIViewController {
    func hideKeyboardWhenTappedAround() {
        let tap = UITapGestureRecognizer(target: self, action: #selector(UIViewController.dismissKeyboard))
        tap.cancelsTouchesInView = false
        view.addGestureRecognizer(tap)
    }
    
    @objc func dismissKeyboard() {
        view.endEditing(true)
    }
}
